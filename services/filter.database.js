const oracledb = require("oracledb");

const table_name = "filters";

module.exports.getFiltersByChatID = async (chat_id, binds = [], opts = []) => {
  const statement = `SELECT * FROM ${table_name} WHERE chat_id=${chat_id}`;

  const result = await execute(statement, binds, opts);

  return result.rows;
};

module.exports.createFilterTable = async (binds = [], opts = []) => {
  const statement = `
        CREATE TABLE ${table_name}
        ( 
            id NUMBER GENERATED by default on null as IDENTITY,
            chat_id number(20) NOT NULL,
            price_start number(38) default 0,
            price_end number(38) default 999999999,
            brand varchar(50) default '',
            model varchar(50) default '',
            region varchar(250) default '',
            city varchar(100) default '',
            city_name varchar(100) default '',
            year_start number(20) default 0,
            year_end number(20) default 2050,
            gearbox varchar(20) default '',
            condition varchar(20) default '',
            is_active number(1) default 1
        )`;

  await execute(statement, binds, opts);
};

module.exports.dropFilterTable = async () => {
  const statement = `DROP TABLE ${table_name}`;

  await execute(statement);
};

module.exports.getAllFilters = async () => {
  const statement = `SELECT * FROM ${table_name}`;

  const res = await execute(statement);

  return res.rows;
};

module.exports.getFilteredFilters = async (data) => {
  const statement = `
  SELECT chat_id FROM ${table_name}
  WHERE 
    ((city = 'any') or (city = '${data.CITY}'))
    and ((year_start <= ${data.CAR_YEAR}) and (year_end >= ${data.CAR_YEAR}))
    and ((price_start <= ${data.PRICE}) and (price_end >= ${data.PRICE}))
    and ((condition = 'any') or (condition = '${data.condition}'))
    and ((gearbox = 'any') or (gearbox = '${data.gearbox}'))
    and ((brand = 'any') or (brand = '${data.BRAND}'))
    and ((model = 'any') or (model = '${data.MODEL}'))
  GROUP BY chat_id
  `;

  //
  //

  const res = await execute(statement);

  return res.rows;
};

module.exports.updateFilter = async (id, data, binds = [], opts = []) => {
  console.log(data);

  console.log("update filter", id);

  const statement = `
    UPDATE ${table_name} 
    SET price_start = ${data.priceStart},
        price_end = ${data.priceEnd},
        brand = '${data.mark.mark}',
        model = '${data.mark.model}',
        region = '${data.region.region}',
        city = '${data.region.city}',
        city_name = '${data.region.cityName}',
        year_start = ${data.yearStart},
        year_end = ${data.yearEnd},
        gearbox = '${data.gearbox}',
        condition = '${data.condition}'
    WHERE ID = ${id}
  `;

  console.log(statement);

  await execute(statement, binds, opts);
};

module.exports.getFilter = async (id, binds = [], opts = []) => {
  const statement = `SELECT * FROM ${table_name} WHERE id = ${id}`;

  console.log("get filter", id);

  const res = await execute(statement, binds, opts);

  if (res.rows) {
    return res.rows[0];
  }

  return null;
};

module.exports.modifyColumn = async () => {
  const statement = `ALTER TABLE ${table_name} MODIFY region varchar(250)`;

  console.log(await execute(statement));
};

module.exports.saveFilter = async (data, binds = [], opts = []) => {
  const statement = `
    INSERT INTO ${table_name} 
    (chat_id, price_start, price_end, brand, model, region, city, city_name, year_start, year_end, gearbox, condition) 
    VALUES 
    ('${data.chatId}', ${data.priceStart}, ${data.priceEnd}, '${data.mark.mark}', '${data.mark.model}', '${data.region.region}', '${data.region.city}', '${data.region.cityName}', ${data.yearStart}, ${data.yearEnd}, '${data.gearbox}', '${data.condition}')
  `;

  const res = await execute(statement, binds, opts);

  return res;
};

module.exports.deleteFilter = async (id, binds = [], opts = []) => {
  const statement = `
    DELETE FROM ${table_name} WHERE ID = ${id}
  `;

  await execute(statement, binds, opts);
};

// Execute PL/SQL query
const execute = (statement, binds = [], opts = []) => {
  console.log("execute filter");

  return new Promise(async (resolve, reject) => {
    let conn;

    opts["outFormat"] = oracledb.OBJECT;
    opts["autoCommit"] = true;

    try {
      conn = await oracledb.getConnection();

      const result = await conn.execute(statement, binds, opts);

      resolve(result);
    } catch (err) {
      console.log(err);

      if (err.errorNum === 942) {
        await this.createFilterTable();
      }

      reject(err);
    } finally {
      if (conn) {
        try {
          await conn.close();
        } catch (err) {
          console.log(err);
        }
      }
    }
  });
};
